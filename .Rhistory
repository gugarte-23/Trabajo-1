# cargamos paquetes
pacman::p_load(tmap, sf, tidyverse, mapview, RColorBrewer, viridis,
leafpop, leaflet, leaflet.extras, mapdeck, plotly, ggmap,
ggiraph, widgetframe)
library(pacman)
# cargamos archivo shp con poligonos de bavaria
bavaria <- read_sf("C:/Users/joseg/Documents/GitHub/Ciencia-de-datos-geoespaciales/data/bavaria.shp")
# exploramos la densidad poblacional
bavaria$D__B_20
# creamos una paleta que nos va a servir para los colores
pal <- magma(n = length(unique(bavaria$D__B_20)), direction = -1)
tmap_mode("plot")
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", palette = pal)
library(sf)#################
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggmap)
library(mapview)
library(dplyr)
library(countrycode)
datos = read.csv(file.choose(), sep = ";", header = TRUE, encoding = "UTF-8" ,fill = TRUE)
View(datos)
datos <- select(datos, -currency_code)
datos <- select(datos, -local_price, -EUR, -GBP, -JPY, -CNY)
library(countrycode)
datos$continent <- countrycode::countrycode(sourcevar = datos[, "name"],
origin = "country.name",
destination = "continent")
install.packages("rgdal")
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", palette = pal)
# para interactivos cambiamos el modo de visualizacion a "view"
tmap_mode("view")
# repetimos el mismo plot
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", palette = pal)
# cambiamos el mapa base
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", palette = pal) +
tm_basemap("Stamen.Watercolor")
# Ahora descargamos las bases de datos asociadas a populated_places de Natural Earth en América del sur
pp110 <- ne_download(scale = 10, type = "populated_places", category = "cultural", returnclass = "sf")
pp120 <- ne_countries(continent = 'South America', returnclass = "sf")
pp130 <- ne_countries(continent = "North America", returnclass = "sf")
prueba2 <- ne_countries(scale=110, type = "countries", continent = NULL, returnclass = "sf")
WORLD = pp110[pp110$continent == "Americas",]
# Ahora descargamos las bases de datos asociadas a populated_places de Natural Earth en América del sur
pp110 <- ne_download(scale = 10, type = "populated_places", category = "cultural", returnclass = "sf")
prueba2 <- ne_countries(scale=110, type = "countries", continent = NULL, returnclass = "sf")
WORLD = pp110[pp110$continent == "Americas",]
# Ahora, creamos un nuevo dataframe con los datos combinados mediante la asociaciÃ³n con la columna iso_a3 y sov_a3
DatosCombinados <- merge(datos, prueba2, by.x="iso_a3", by.y="sov_a3")
DataComb <- select(DatosCombinados, iso_a3, date, name.x, dollar_ex, dollar_price, USD, continent.x,  gdp_md_est, income_grp, geometry)
library(sf)
Mapa <- st_as_sf(DataComb)
pacman::p_load(tmap, sf, tidyverse, mapview, RColorBrewer, viridis,
leafpop, leaflet, leaflet.extras, mapdeck, plotly, ggmap,
ggiraph, widgetframe)
# creamos una paleta que nos va a servir para los colores
pal <- magma(n = length(unique(Mapa$name.x)), direction = -1)
# graficamos usando funcion mapview
mapview(Mapa)
# especificamos variable para colorear
mapview(Mapa, zcol = "name.x")
# especificamos paleta
mapview(Mapa, zcol = "dollar_price", col.regions = pal, legend= mapviewGetOption("legend"))
library(tmap)
tmap_mode("view")
tm_shape(Mapa) +
tm_polygons(col = "dollar_price", id = "iso_a3", palette= pal)
# repetimos el mismo plot
tm_shape(Mapa) +
tm_polygons(col = "name.x", palette = pal)
# cambiamos el mapa base
tm_shape(Mapa) +
tm_polygons(col = "name.x", palette = pal) +
tm_basemap("Stamen.Watercolor")
tm_shape(Mapa) +
tm_polygons(col = "name.x", palette = pal)
tmap_mode("view")
tm_shape(Mapa) +
tm_polygons(col = "dollar_price", id = "name.x", pallette = pal )
# especificamos variable para colorear
mapview(Mapa, zcol = "name.x")
# especificamos paleta
mapview(Mapa, zcol = "dollar_price", col.regions = pal, legend= mapviewGetOption("legend"))
library(tmap)
tmap_mode("view")
tm_shape(Mapa) +
tm_polygons(col = "dollar_price", id = "iso_a3", palette= pal)
View(DatosCombinados)
datos = read.csv(file.choose(), sep = ";", header = TRUE, encoding = "UTF-8" ,fill = TRUE)
View(datos)
datos = read.csv(file.choose(), sep = ";", header = TRUE, encoding = "UTF-8" ,fill = TRUE)
View(datos)
datos = read.csv(file.choose(), sep = ",", header = TRUE, encoding = "UTF-8" ,fill = TRUE)
datos = read.csv(file.choose(), sep = ";", header = TRUE, encoding = "UTF-8" ,fill = TRUE)
View(datos)
corrdara = cor(data)
corrdarta = cor(datos)
install.packages("corrplot")
library(corrplot)
corrdarta = cor(datos)
corrdarta = cor(datos$local_price,datos$dollar_price)
df = datos.frame(datos$local_price, datos$dollar_price)
df = data.frame(datos$local_price, datos$dollar_price)
a = corrplot(df)
a = cor(df)
View(df)
df = data.frame(datos$dollar_ex, datos$dollar_price)
a = cor(df)
View(df)
df = data.frame(datos$dollar_ex, datos$local_price)
a = cor(df)
df
cor(df)
cor(datos$dollar_ex, datos$local_price
cor(datos$dollar_ex, datos$local_price)
cor(dollar_ex, local_price)
cor(df, NULL)
cor(datos$dollar_ex, datos$local_price, method = c("pearson"))
# graficamos usando funcion mapview
mapview(Mapa)
cor(RETS, use="pairwise.complete.obs")
cor(datos$dollar_ex, datos$local_price, method = c("pearson"),use="pairwise.complete.obs")
cor(df, method = c("pearson"))
?cor
cor(df, use = "all.obs", method = c("pearson"))
View(df)
cor(datos, use = "all.obs", method = c("pearson"))
cor(sf, use = "all.obs", method = c("pearson"))
cor(df, use = "all.obs", method = c("pearson"))
class(datos)
class(datos$dollar_ex)
class(datos$local_price)
as.integer(datos$dollar_ex)
class(datos$dollar_ex)
cor(datos$local_price, method = c("pearson"))
cor(df, method = c("pearson"))
as.integer(datos$dollar_ex)
class(datos$dollar_ex)
sapply(df, class)
df[] <- lapply(df, function(x) as.numeric(as.character(x)))
sapply(df, class)
#cor(df, method = c("pearson"))
class(datos$dollar_ex)
class(datos$local_price)
cor(df, method = c("pearson"))
class(datos$dollar_ex)
class(datos$local_price)
install.packages(c("gstat", "leaflet.extras2"))
library(rnaturalearth)
library(rnaturalearthdata)
library(mapview)
library(dplyr)
library(sf)
library(gstat)
library(sp)
# Definimos nuestra base de datos asociada al valor de la bigmac en el mundo por año
datos= read.csv(file.choose(), sep = ",", header = TRUE, encoding = "UTF-8" ,fill = TRUE)
View(datos)
datos <- select(datos, -currency_code)
datos <- select(datos, -local_price, -EUR, -GBP, -JPY, -CNY)
library(countrycode)
datos$continent <- countrycode::countrycode(sourcevar = datos[, "name"],
origin = "country.name",
destination = "continent")
pp120 <- ne_countries(scale = 'large' ,returnclass = "sf")
pp120 <- ne_countries(scale = 'large' ,returnclass = "sf")
install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
# Ahora, creamos un nuevo dataframe con los datos combinados mediante la asociaciÃ³n con la columna iso_a3 y sov_a3
DatosCombinados <- merge(datos, pp120, by.x="iso_a3", by.y="sov_a3")
datos$continent <- countrycode::countrycode(sourcevar = datos[, "name"],
origin = "country.name",
destination = "continent")
pp120 <- ne_countries(scale = 'large' ,returnclass = "sf")
install.packages("rnaturalearthhires")
pp120 <- ne_countries(scale = 'large' ,returnclass = "sf")
library(sf)
install.packages("installr", dependencies = TRUE)
library(installr)
updateR()
